title("Effect of prior")
legend("topright",  legend = c("P(TS 1) = .5","P(TS 1) = .9","P(TS 1) = .1"),
lty=c(1,1,1), col=c(1,2,4),ncol=1, cex = .8)
#graph the two distributions and their relative likelihood assuming a flat prior
curve(dnorm(x,mean = mu1, sd = sd1), -1, 1,
ylim = c(0,2))
par(new = T)
curve(dnorm(x,mean = mu2, sd = sd2), -1, 1,
yaxt = "n", ylab = "",ylim = c(0,2))
par(new = T)
curve(dnorm(x,mean = mu2, sd = sd2)/
(dnorm(x,mean = mu2, sd = sd2)+dnorm(x,mean = mu1, sd = sd1)),
-1, 1, yaxt = "n", ylab = "", ylim = c(0,2), col = 'red')
#show relative likelihood including a recursive transition probability of .9
#dashed line shows the likelihood given that one is in state 2 (mu = mu2)
#dotted line shows likelihood given one is in state 1
relative_probabilities = function(x,prior1, prior2) {
dnorm(x,mean = mu1, sd = sd1)*prior1/
(dnorm(x,mean = mu2, sd = sd2)*prior2+
dnorm(x,mean = mu1, sd = sd1)*prior1)
}
curve(relative_probabilities(x,.5,.5),-1,1,ylim=c(0,1),
ylab = "Posterior P(TS 1)", xlab = "Shade Context (Black to White)")
par(new = T)
curve(relative_probabilities(x,.9,.1),-1,1,ylim=c(0,1),
col = 'red',xlab = "", ylab = "")
par(new = T)
curve(relative_probabilities(x,.1,.9),-1,1,ylim=c(0,1), col = 'blue',
xlab = "", ylab = "")
title("Effect of prior")
legend("topright",  legend = c("P(TS 1) = .5","P(TS 1) = .9","P(TS 1) = .1"),
lty=c(1,1,1), col=c(1,2,4),ncol=1, cex = .8)
#incorporate utility, weight probabilities by maximal utility possible
choice_probabilities = function(x,prior1, prior2, value1, value2) {
dnorm(x,mean = mu1, sd = sd1)*prior1*value1/
(dnorm(x,mean = mu2, sd = sd2)*prior2*value2+
dnorm(x,mean = mu1, sd = sd1)*prior1*value1)
}
#graph the two distributions and their relative likelihood assuming a flat prior
curve(dnorm(x,mean = mu1, sd = sd1), -1, 1,
ylim = c(0,2))
par(new = T)
curve(dnorm(x,mean = mu2*2, sd = sd2), -1, 1,
yaxt = "n", ylab = "",ylim = c(0,2))
par(new = T)
curve(dnorm(x,mean = mu2, sd = sd2)/
(dnorm(x,mean = mu2, sd = sd2)+dnorm(x,mean = mu1, sd = sd1)),
-1, 1, yaxt = "n", ylab = "", ylim = c(0,2), col = 'red')
curve(choice_probabilities(x,.5,.5,1,2),-1,1,ylim=c(0,1),
ylab = "Posterior P(TS 1)", xlab = "Shade Context (Black to White)")
par(new = T)
curve(choice_probabilities(x,.9,.1,1,2),-1,1,ylim=c(0,1),
col = 'red',xlab = "", ylab = "")
par(new = T)
curve(choice_probabilities(x,.1,.9,1,2),-1,1,ylim=c(0,1), col = 'blue',
xlab = "", ylab = "")
title("Effect of prior")
legend("topright",  legend = c("P(TS 1) = .5","P(TS 1) = .9","P(TS 1) = .1"),
lty=c(1,1,1), col=c(1,2,4),ncol=1, cex = .8)
curve(dnorm(x,mean = mu1, sd = sd1), -1, 1,
ylim = c(0,2))
par(new = T)
curve(dnorm(x,mean = mu2*2, sd = sd2), -1, 1,
yaxt = "n", ylab = "",ylim = c(0,2))
par(new = T)
curve(dnorm(x,mean = mu2, sd = sd2)/
(dnorm(x,mean = mu2, sd = sd2)+dnorm(x,mean = mu1, sd = sd1)),
-1, 1, yaxt = "n", ylab = "", ylim = c(0,2), col = 'red')
curve(dnorm(x,mean = mu1, sd = sd1), -1, 1,
ylim = c(0,2))
par(new = T)
curve(2*dnorm(x,mean = mu2, sd = sd2), -1, 1,
yaxt = "n", ylab = "",ylim = c(0,2))
par(new = T)
curve(dnorm(x,mean = mu2, sd = sd2)/
(dnorm(x,mean = mu2, sd = sd2)+dnorm(x,mean = mu1, sd = sd1)),
-1, 1, yaxt = "n", ylab = "", ylim = c(0,2), col = 'red')
curve(dnorm(x,mean = mu1, sd = sd1), -1, 1,
ylim = c(0,3))
par(new = T)
curve(2*dnorm(x,mean = mu2, sd = sd2), -1, 1,
yaxt = "n", ylab = "",ylim = c(0,2))
par(new = T)
curve(dnorm(x,mean = mu2, sd = sd2)/
(dnorm(x,mean = mu2, sd = sd2)+dnorm(x,mean = mu1, sd = sd1)),
-1, 1, yaxt = "n", ylab = "", ylim = c(0,2), col = 'red')
curve(dnorm(x,mean = mu1, sd = sd1), -1, 1,
ylim = c(0,3))
par(new = T)
curve(2*dnorm(x,mean = mu2, sd = sd2), -1, 1,
yaxt = "n", ylab = "",ylim = c(0,3))
par(new = T)
curve(dnorm(x,mean = mu1, sd = sd1)/
(dnorm(x,mean = mu1, sd = sd1)+dnorm(x,mean = mu2, sd = sd2)*2),
-1, 1, yaxt = "n", ylab = "", ylim = c(0,3), col = 'red')
curve(dnorm(x,mean = mu1, sd = sd1), -1, 1,
ylim = c(0,3))
par(new = T)
curve(2*dnorm(x,mean = mu2, sd = sd2), -1, 1,
yaxt = "n", ylab = "",ylim = c(0,3))
par(new = T)
curve(dnorm(x,mean = mu1, sd = sd1)/
(dnorm(x,mean = mu1, sd = sd1)+dnorm(x,mean = mu2, sd = sd2)),
-1, 1, yaxt = "n", ylab = "", ylim = c(0,3), col = 'red')
curve(dnorm(x,mean = mu1, sd = sd1), -1, 1,
ylim = c(0,3))
par(new = T)
curve(2*dnorm(x,mean = mu2, sd = sd2), -1, 1,
yaxt = "n", ylab = "",ylim = c(0,3))
par(new = T)
curve(dnorm(x,mean = mu1, sd = sd1)/
(dnorm(x,mean = mu1, sd = sd1)+dnorm(x,mean = mu2, sd = sd2)),
-1, 1, yaxt = "n", ylab = "", ylim = c(0,3), col = 'red')
par(new = T)
curve(dnorm(x,mean = mu1, sd = sd1)/
(dnorm(x,mean = mu1, sd = sd1)+dnorm(x,mean = mu2, sd = sd2)*2),
-1, 1, yaxt = "n", ylab = "", ylim = c(0,3), col = 'red')
curve(dnorm(x,mean = mu1, sd = sd1), -1, 1,
ylim = c(0,3))
par(new = T)
curve(2*dnorm(x,mean = mu2, sd = sd2), -1, 1,
yaxt = "n", ylab = "",ylim = c(0,3))
par(new = T)
curve(dnorm(x,mean = mu1, sd = sd1)/
(dnorm(x,mean = mu1, sd = sd1)+dnorm(x,mean = mu2, sd = sd2)*2),
-1, 1, yaxt = "n", ylab = "", ylim = c(0,3), col = 'red')
#Without hypothesis priors one should change their policy based on whether the
#context is > 0
#With recursive transition probability = .9, given you are in state 1, you
#should wait until the context = -.5 with these values:
mu1 = -.3
mu2 = .3
sd1 = .37
sd2 = .37
#calculate overlap of two normal distributions
min.f1f2 <- function(x, mu1, mu2, sd1, sd2) {
f1 <- dnorm(x, mean=mu1, sd=sd1)
f2 <- 2*dnorm(x, mean=mu2, sd=sd2)
pmin(f1, f2)
}
integrate(min.f1f2, -Inf, Inf, mu1=mu1, mu2=mu2, sd1=sd1, sd2=sd2)
x <- seq(from=-1, to=1,by=0.01)
curve(dnorm(x,-.3,.37), xlim=c(-1,1),
xlab = "Gray Spectrum", ylab = "Density")
segments(x, rep(0,length(x)),x,dnorm(x,-.3,.37) ,
col=grey.colors(length(x), start = 0, end = 1), lwd=2)
par(new = T)
curve(dnorm(x,-.3,.37), xlim=c(-1,1), ylab = "", xlab = "", lwd = 2)
curve(dnorm(x,-.3,.37), xlim=c(-1,1),
xlab = "Gray Spectrum", ylab = "Density")
segments(x, rep(0,length(x)),x,dnorm(x,-.3,.37) ,
col=grey.colors(length(x), start = 0, end = 1), lwd=2)
par(new = T)
curve(dnorm(x,.3,.37), xlim=c(-1,1), ylab = "", xlab = "")
segments(x, rep(0,length(x)),x,dnorm(x,.3,.37) ,
col=grey.colors(length(x), start = 0, end = 1), lwd=2)
par(new=T)
curve(dnorm(x,.3,.37), xlim=c(-1,1), ylab = "", xlab = "", lwd = 2)
par(new=T)
curve(dnorm(x,-.3,.37), xlim=c(-1,1), ylab = "", xlab = "", lwd = 2, lty = 3)
#show relative likelihood including a recursive transition probability of .9
#dashed line shows the likelihood given that one is in state 2 (mu = mu2)
#dotted line shows likelihood given one is in state 1
curve(choice_probabilities(x,.5,.5,1,2),-1,1,ylim=c(0,1),
ylab = "Posterior P(TS 1)", xlab = "Shade Context (Black to White)")
par(new = T)
curve(choice_probabilities(x,.9,.1,1,2),-1,1,ylim=c(0,1),
col = 'red',xlab = "", ylab = "")
par(new = T)
curve(choice_probabilities(x,.1,.9,1,2),-1,1,ylim=c(0,1), col = 'blue',
xlab = "", ylab = "")
title("Effect of prior")
legend("topright",  legend = c("P(TS 1) = .5","P(TS 1) = .9","P(TS 1) = .1"),
lty=c(1,1,1), col=c(1,2,4),ncol=1, cex = .8)
setwd("~/Box Sync/Programming/Experiments/Color_Structure/Analysis")
dataFiles <- Sys.glob("../Data/*modeled.csv")
dataFiles
dfa = read.csv(dataFiles[2])
head(dfa)
library(ggplot2)
dfa$FB = factor(dfa$FB)
dfa$curr_ts = factor(dfa$curr_ts)
head(dfa)
str(dfa)
lag(dfa$FB)
lag(dfa$rt)
dfa$rt
lag(dfa$rt,2)
?lag
a= lag(dfa$rt)
a
dfa$rt
dfa$rt
class(dfa$rt)
dfa$rt
lag(c(1,2,3))
lag(c(1,2,3))
lagpad <- function(x, k) {
if(k > 0) {
c(rep(NA, k), x)[1 : length(x)]
} else {
c(x, rep(NA, abs(k)))[abs(k)+1 : length(x)-k-1]
}}
lagpad(dfa$rt,2)
lagpad(dfa$rt,-2)
lagpad <- function(x, k) {
if(k > 0) {
c(rep(NA, k), x)[1 : length(x)]
} else {
c(x, rep(NA, abs(k)))[abs(k) : length(x)-k]
}}
lagpad(dfa$rt,-2)
dfa$rt[1]
dfa$rt[0]
dfa$rt[1:3]
dfa$rt[1:4]
k=2
rep(NA, k)
c(rep(NA, k), x)
x=dfa$rt
c(x, rep(NA, abs(k)))
k
k = -2
c(x, rep(NA, abs(k)))
[abs(k) : length(x)-k]
c(x, rep(NA, abs(k)))[abs(k) : length(x)-k]
k
abs(k)
a=c(x, rep(NA, abs(k)))
a
a[1]
a[2]
a[3]
a[4]
a[abs(k) : length(x)-k]
a[2:length(x)-2]
a
a=c(1,2,3,4)
a
a[2:3]
a[2:3]
a=c(5,6,7,8)
a[2:3]
a[2:4]
a[k:3]
k
length(a)
a[abs(k):3]
a=c(x, rep(NA, abs(k)))
a
length(a)
length(dfa$rt)
a[1]
a[2]
a[3]
a[3:10]
a[2:10]
a[abs(k):10]
a[abs(k)+1:10]
abs(k)+1
length(x)-k+1
c(x, rep(NA, abs(k)))[abs(k)+1 : length(x)-k+1]
c(x, rep(NA, abs(k)))
k
c(x, rep(NA, abs(k)))[abs(k)+1 : length(x)-k+1]
c(x, rep(NA, abs(k)))[abs(k)+1 : length(x)]
lagpad <- function(x, k) {
if(k > 0) {
c(rep(NA, k), x)[1 : length(x)]
} else {
c(x, rep(NA, abs(k)))[abs(k)+1 : length(x)]
}}
str(dfa)
dfa$context
lagpad(dfa$context,-1)
'lagged'
'lagged' + str(3)
'lagged' + 3
c('lagged',3)
cat('hi',3)
var_name = paste(c('lagged', lag), collapse = "")
var_name
lag
lag = 2
lag_i = 1
var_name = paste(c('lagged', lag_i), collapse = "")
var_name
for (lag_i in 1:10) {
var_name = paste(c('lagged_', lag_i), collapse = "")
dfa$lagged = lagpad(dfa$context,-lag)
}
str(dfa)
for (lag_i in 1:10) {
var_name = paste(c('lagged_', lag_i), collapse = "")
dfa$var_name = lagpad(dfa$context,-lag)
}
str(dfa)
lagpad(dfa$context,c(1,2))
lagpad(dfa$context,2
)
tmp_df = data.frame()
tmp_df = data.frame()
for (lag_i in 1:10) {
tmp_df$lag_i = lagpad(dfa$context,lag_i)
}
seq(1,10)
tmp_df
tmp_df['a'] = lagpad(dfa$context,lags[1])
tmp_df = data.frame()
lags = seq(1,10)
tmp_df['a'] = lagpad(dfa$context,lags[1])
tmp_df = matrix()
tmp_df['a'] = lagpad(dfa$context,lags[1])
tmp_df[:,] = lagpad(dfa$context, 1)
lag_mat = lagpad(dfa$context, 1)
lag_mat
class(lag_mat)
lag_mat = lagpad(dfa$context, 1)
lags = seq(2,10)
for (i in lags) {}
lag_mat = cbind(lag_mat, lagpad(dfa$context,lags))
}
lag_mat = lagpad(dfa$context, 1)
lags = seq(2,10)
for (i in lags) {
lag_mat = cbind(lag_mat, lagpad(dfa$context,lags))
}
lags
for (i in lags) { print i}
for (i in lags) { print(i)}
lag_mat = lagpad(dfa$context, 1)
lags = seq(2,10)
for (i in lags) {
lag_mat = cbind(lag_mat, lagpad(dfa$context,i))
}
lag_mat
len(lag_mat)
length(lag_mat)
dims(lag_mat)
lag_mat = lagpad(dfa$context, 1)
lags = seq(2,10)
for (i in lags) {
lag_mat = rbind(lag_mat, lagpad(dfa$context,i))
}
dim(lag_mat)
lag_mat
lag_mat = lagpad(dfa$context, 1)
lags = seq(2,10)
for (i in lags) {
lag_mat = c(lag_mat, lagpad(dfa$context,i))
}
dim(lag_mat)
lag_mat
?cbind
lag_mat = lagpad(dfa$context, 1)
lags = seq(2,10)
for (i in lags) {
lag_mat = cbind(lag_mat, lagpad(dfa$context,i))
}
lag_mat
dim(lag_mat)
cbind(dfa,lag_mat)
a=cbind(dfa,lag_mat)
dim(a)
str(a)
a=cbind(dfa,lag_mat, labels = c("a","b"))
a=cbind(dfa,lag_mat, labels = c("lag1","lag2","lag3","lag4","lag5","lag6","lag7","lag8","lag9","lag10"))
str(lag_mat)
lag_1 = lagpad(dfa$context, 1)
lags = seq(2,10)
for (i in lags) {
lag_mat = cbind(lag_1, lagpad(dfa$context,i))
}
a=cbind(dfa,lag_mat)
a
str(a)
lag_mat
lag_mat = lagpad(dfa$context, 1)
lags = seq(2,10)
for (i in lags) {
lag_mat = cbind(lag_mat, lagpad(dfa$context,i))
}
a=cbind(dfa,lag_mat)
str(lag_mat)
str(a)
names(a) <- gsub("V", "lag_", names(d))
names(a) <- gsub("V", "lag_", names(a))
str(a)
library(dplyr)
lag_mat = lagpad(dfa$context, 1)
lags = seq(2,10)
for (i in lags) {
lag_mat = cbind(lag_mat, lagpad(dfa$context,i))
}
dfa=cbind(dfa,lag_mat)
rename(dfa, c("lag_1" = "lag_mat"))
names(dfa) <- gsub("V", "lag_", names(dfa))
dfa=cbind(dfa,lag_mat)
rename(dfa, c("lag_mat" = "lag_1"))
names(dfa) <- gsub("V", "lag_", names(dfa))
dfa=cbind(dfa,lag_mat)
rename(dfa, c("lag_mat" = "lag_1"))
str(dfa)
library(plyr)
dfa=cbind(dfa,lag_mat)
rename(dfa, c("lag_mat" = "lag_1"))
names(dfa) <- gsub("V", "lag_", names(dfa))
str(dfa)
dfa=cbind(dfa,lag_mat)
dfa = rename(dfa, c("lag_mat" = "lag_1"))
names(dfa) <- gsub("V", "lag_", names(dfa))
str(dfa)
dfa = read.csv(dataFiles[2])
dfa$FB = factor(dfa$FB)
dfa$curr_ts = factor(dfa$curr_ts)
dfa$stim = factor(dfa$stim)
lag_mat = lagpad(dfa$context, 1)
lags = seq(2,10)
for (i in lags) {
lag_mat = cbind(lag_mat, lagpad(dfa$context,i))
}
dfa=cbind(dfa,lag_mat)
dfa = rename(dfa, c("lag_mat" = "lag_1"))
names(dfa) <- gsub("V", "lag_", names(dfa))
str(dfa)
dfa$ts0_posterior_ignore
dfa$ts0_posterior_ignore>.5
glm(ts0_posterior_ignore>.5 ~ context + lag_1 + lag_1 + lag_1 + lag_1 + lag_1 + lag_1 +
lag_1 + lag_1 + lag_1 + lag_1, family = "binomial", data = dfa)
glm(ts0_posterior_ignore>.5 ~ context + lag_1 + lag_2 + lag_3 + lag_4 + lag_5 + lag_6 +
lag_7 + lag_8 + lag_9 + lag_10, family = "binomial", data = dfa)
head(dfa)
tail(dfa)
lm(ts0_posterior_ignore ~ context + lag_1 + lag_2 + lag_3 + lag_4 + lag_5 + lag_6 +
lag_7 + lag_8 + lag_9 + lag_10, data = dfa)
m1 = glm(ts0_posterior_ignore>.5 ~ context + lag_1 + lag_2 + lag_3 + lag_4 + lag_5 + lag_6 +
lag_7 + lag_8 + lag_9 + lag_10, family = "binomial", data = dfa)
m2 = lm(ts0_posterior_ignore ~ context + lag_1 + lag_2 + lag_3 + lag_4 + lag_5 + lag_6 +
lag_7 + lag_8 + lag_9 + lag_10, data = dfa)
summary(m2)
str(dfa)
m2 = lm(ts0_posterior_single ~ context + lag_1 + lag_2 + lag_3 + lag_4 + lag_5 + lag_6 +
lag_7 + lag_8 + lag_9 + lag_10, data = dfa)
summary(m2)
m1 = glm(ts0_posterior_single>.5 ~ context + lag_1 + lag_2 + lag_3 + lag_4 + lag_5 + lag_6 +
lag_7 + lag_8 + lag_9 + lag_10, family = "binomial", data = dfa)
summary(m1)
m1 = glm(ts0_posterior_single<.5 ~ context + lag_1 + lag_2 + lag_3 + lag_4 + lag_5 + lag_6 +
lag_7 + lag_8 + lag_9 + lag_10, family = "binomial", data = dfa)
summary(m1)
m1 = glm(ts0_posterior_optimal<.5 ~ context + lag_1 + lag_2 + lag_3 + lag_4 + lag_5 + lag_6 +
lag_7 + lag_8 + lag_9 + lag_10, family = "binomial", data = dfa)
summary(m1)
m1 = glm(ts0_posterior_singlel<.5 ~ context + lag_1 + lag_2 + lag_3 + lag_4 + lag_5 + lag_6 +
lag_7 + lag_8 + lag_9 + lag_10, family = "binomial", data = dfa)
m1 = glm(ts0_posterior_single<.5 ~ context + lag_1 + lag_2 + lag_3 + lag_4 + lag_5 + lag_6 +
lag_7 + lag_8 + lag_9 + lag_10, family = "binomial", data = dfa)
summary(m1)
rs4 = glm(con_shape ~ ts0_posterior_single, data = dfa, family = binomial)
rs1 = glm(con_shape ~ ts0_posterior_single, data = dfa, family = binomial)
summary(rs1)
rs1 = glm(con_shape ~ ts0_posterior_ignore, data = dfa, family = binomial)
rs2 = glm(con_shape ~ ts0_posterior_single, data = dfa, family = binomial)
rs3 = glm(con_shape ~ ts0_posterior_optimal, data = dfa, family = binomial)
summary(rs1)
summary(rs2)
summary(rs3)
summary(rs1)
summary(rs2)
summary(rs3)
anova(rs1,rs2)
summary(anova(rs1,rs2))
summary(rs1)
summary(rs1)
summary(rs2)
summary(rs3)
summary(rs1)
anova(rs3,rs2)
m1 = glm(ts0_posterior_single<.5 ~ context + lag_1, family = "binomial", data = dfa)
summary(m1)
m1 = glm(ts0_posterior_single<.5 ~ context + lag_1, family = "binomial", data = dfa)
m2 = glm(ts0_posterior_single<.5 ~ context + lag_1 + lag_2, family = "binomial", data = dfa)
anova(m1,m2)
m2
anova(m1,m2)
anova(m2,m1)
head(dfa)
sub = dfa[10:,]
sub = dfa[10:,.]
sub = dfa[10:length(dfa),.]
dfa
dfa[1:10,]
sub = dfa[10:length(dfa),]
head(sub)
sub = dfa[11:length(dfa),]
m1 = glm(ts0_posterior_single<.5 ~ context + lag_1, family = "binomial", data = sub)
m2 = glm(ts0_posterior_single<.5 ~ context + lag_1 + lag_2, family = "binomial", data = sub)
anova(m1,m2)
summary(anova(m1,m2))
anova(m2,m1)
anova(m2,m1,test = "Chisq")
anova(m1,m2,test = "Chisq")
m1
m2
summary(glm(ts0_posterior_single ~ context + lagpad(ts), data = dfa))
> summary(glm(ts0_posterior_single ~ context + lagpad(ts), data = dfa))
summary(glm(ts0_posterior_single ~ context + lagpad(ts), family = "binomial", data = dfa))
summary(glm(ts0_posterior_single ~ context + lagpad(ts,1), family = "binomial", data = dfa))
lagpad(dfa$ts,1)
summary(glm(ts0_posterior_single ~ context + lagpad(ts,1), family = "binomial", data = dfa))
summary(lm(ts0_posterior_single ~ context + lagpad(ts,1),  data = dfa))
?dt
